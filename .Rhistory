#Gross profit - IS
#Total Revenue - IS
GMAR[i] = cIS[5]/cIS[3]
#ACC
# (depreciation - changes in working capital)/(total assets)
#*# Going from equation they show. Slight difference from their own
## words.
# Depreciation - CF
# Changes in working capital - CF
# Total assets - BS
ACC[i] = (cIS[8] - cCF[6])/cBS[17]
}
#Scale converts the individual scores for these values into z-scores.
GPOA <- scale(GPOA)
ROE <- scale(ROE)
ROA <- scale(ROA)
CFOA <- scale(CFOA)
GMAR <- scale(GMAR)
ACC <- scale(ACC)
GPOA[is.nan(GPOA)] <- 0
ROE[is.nan(ROE)] <- 0
ROA[is.nan(ROA)] <- 0
CFOA[is.nan(CFOA)] <- 0
GMAR[is.nan(GMAR)] <- 0
ACC[is.nan(ACC)] <- 0
for(i in 1:numCompanies){
profitability[i] <- GPOA[i] + ROE[i] + ROA[i] + CFOA[i] + GMAR[i] + ACC[i]
}
scale(profitability)
}
test <- collectmarketdata()
View(test)
collectmarketprofitability <- function(x, BS, CF, IS){
# CollectMarketProfitability collects data on overall profitability
## In the market for individual companies for later processing.
## x is the list of companies to be processed. BS, CF, IS are financial statements.
numCompanies <- length(x$tickers)
profitability <- rep(0, numCompanies)
GPOA <- rep(0, numCompanies)
ROE <- rep(0, numCompanies)
ROA <- rep(0, numCompanies)
CFOA <- rep(0, numCompanies)
GMAR <- rep(0, numCompanies)
ACC <- rep(0, numCompanies)
for(i in 1:numCompanies){
cBS <- BS[,(4*i)-2]
cCF <- CF[,(4*i)-2]
cIS <- IS[,(4*i)-2]
#GPOA = (revenue - cost of goods sold)/(total assets)
#?#GROSS PROFITS OVER TOTAL ASSETS. THIS CAN BE EASILY FOUND.
#Cost of goods sold = Beginning Inventory + Inventory Purchases - End Inventory
##Gross profit - Income statement
##Total assets - in balance sheet.
GPOA[i] = cIS[5]/cBS[17]
#ROE
# Net income /book equity
# Net income - Cash flow
#?#Book equity = Total equity (BS)
ROE[i] = cCF[1]/cBS[39]
#ROA
#Net income / Total assets
# Net income - CF
# Total assets - BS
ROA[i] = cCF[1]/cBS[17]
#CFOA
#(net income + depreciation - (change in working capital) - capital expenditures)/(total assets)
# Net income - CF
# Depreciation - IS
# Change in working capital - CF
# Capital Expenditures - CF
# Total assets - BS
CFOA[i] = (cCF[1] + cIS[8] - cCF[6] - cCF[8])/cBS[17]
#GMAR
# (Revenue - costs of goods sold)/(total sales)
# = Gross profit/(total sales)
#?# Using different equation:
# Gross profit/ (Total revenue)
#Gross profit - IS
#Total Revenue - IS
GMAR[i] = cIS[5]/cIS[3]
#ACC
# (depreciation - changes in working capital)/(total assets)
#*# Going from equation they show. Slight difference from their own
## words.
# Depreciation - CF
# Changes in working capital - CF
# Total assets - BS
ACC[i] = (cIS[8] - cCF[6])/cBS[17]
}
#Scale converts the individual scores for these values into z-scores.
GPOA <- scale(GPOA)
ROE <- scale(ROE)
ROA <- scale(ROA)
CFOA <- scale(CFOA)
GMAR <- scale(GMAR)
ACC <- scale(ACC)
GPOA[is.nan(GPOA)] <- 0
ROE[is.nan(ROE)] <- 0
ROA[is.nan(ROA)] <- 0
CFOA[is.nan(CFOA)] <- 0
GMAR[is.nan(GMAR)] <- 0
ACC[is.nan(ACC)] <- 0
for(i in 1:numCompanies){
profitability[i] <- GPOA[i] + ROE[i] + ROA[i] + CFOA[i] + GMAR[i] + ACC[i]
}
scale(profitability)
}
test <- collectmarketdata()
View(BS)
View(CF)
collectmarketprofitability <- function(x, BS, CF, IS){
# CollectMarketProfitability collects data on overall profitability
## In the market for individual companies for later processing.
## x is the list of companies to be processed. BS, CF, IS are financial statements.
numCompanies <- length(x$tickers)
profitability <- rep(0, numCompanies)
GPOA <- rep(0, numCompanies)
ROE <- rep(0, numCompanies)
ROA <- rep(0, numCompanies)
CFOA <- rep(0, numCompanies)
GMAR <- rep(0, numCompanies)
ACC <- rep(0, numCompanies)
for(i in 1:numCompanies){
print(i)
cBS <- BS[,(4*i)-2]
cCF <- CF[,(4*i)-2]
cIS <- IS[,(4*i)-2]
#GPOA = (revenue - cost of goods sold)/(total assets)
#?#GROSS PROFITS OVER TOTAL ASSETS. THIS CAN BE EASILY FOUND.
#Cost of goods sold = Beginning Inventory + Inventory Purchases - End Inventory
##Gross profit - Income statement
##Total assets - in balance sheet.
GPOA[i] = cIS[5]/cBS[17]
#ROE
# Net income /book equity
# Net income - Cash flow
#?#Book equity = Total equity (BS)
ROE[i] = cCF[1]/cBS[39]
#ROA
#Net income / Total assets
# Net income - CF
# Total assets - BS
ROA[i] = cCF[1]/cBS[17]
#CFOA
#(net income + depreciation - (change in working capital) - capital expenditures)/(total assets)
# Net income - CF
# Depreciation - IS
# Change in working capital - CF
# Capital Expenditures - CF
# Total assets - BS
CFOA[i] = (cCF[1] + cIS[8] - cCF[6] - cCF[8])/cBS[17]
#GMAR
# (Revenue - costs of goods sold)/(total sales)
# = Gross profit/(total sales)
#?# Using different equation:
# Gross profit/ (Total revenue)
#Gross profit - IS
#Total Revenue - IS
GMAR[i] = cIS[5]/cIS[3]
#ACC
# (depreciation - changes in working capital)/(total assets)
#*# Going from equation they show. Slight difference from their own
## words.
# Depreciation - CF
# Changes in working capital - CF
# Total assets - BS
ACC[i] = (cIS[8] - cCF[6])/cBS[17]
}
#Scale converts the individual scores for these values into z-scores.
GPOA <- scale(GPOA)
ROE <- scale(ROE)
ROA <- scale(ROA)
CFOA <- scale(CFOA)
GMAR <- scale(GMAR)
ACC <- scale(ACC)
GPOA[is.nan(GPOA)] <- 0
ROE[is.nan(ROE)] <- 0
ROA[is.nan(ROA)] <- 0
CFOA[is.nan(CFOA)] <- 0
GMAR[is.nan(GMAR)] <- 0
ACC[is.nan(ACC)] <- 0
for(i in 1:numCompanies){
profitability[i] <- GPOA[i] + ROE[i] + ROA[i] + CFOA[i] + GMAR[i] + ACC[i]
}
scale(profitability)
}
test <- collectmarketdata()
BS[1,1]
BS[1,2]
names(BS)
?matrix
View(BS)
getincomestatements <- function() {
require(quantmod)
companies <- read.csv("companies.csv")
tickers <- as.character(companies$tickers)
vect <- list()
n <- 1
for(i in tickers) {
prospective <- tryCatch(getFinancials(i,auto.assign = FALSE),
error=function(e) {
e
})
matr <- matrix()
if(!inherits(prospective,"error") && nrow(matr <- viewFinancials(prospective,type = 'IS',period = 'A'))) {
a <- 1
while(a <= length(colnames(matr))) {
colnames(matr)[a] <- sub("[-][0-9]*[-][0-9]*","",paste(i,colnames(matr)[a]))
a = a + 1
}
vect[[n]] <- matr
n = n+1
} else {
vect[[n]] <- matrix(dat=NA, ncol=4, nrow=42)
n = n+1
}
}
write.csv(vect,file="incomestatements.csv")
}
getcashflows <- function() {
require(quantmod)
companies <- read.csv("companies.csv")
tickers <- as.character(companies$tickers)
vect <- list()
n <- 1
for(i in tickers) {
prospective <- tryCatch(getFinancials(i,auto.assign = FALSE),
error=function(e) {
e
})
matr <- matrix()
if(!inherits(prospective,"error") && nrow(matr <- viewFinancials(prospective,type = 'CF',period = 'A'))) {
a <- 1
while(a <= length(colnames(matr))) {
colnames(matr)[a] <- sub("[-][0-9]*[-][0-9]*","",paste(i,colnames(matr)[a]))
a = a + 1
}
vect[[n]] <- matr
n = n+1
} else {
vect[[n]] <- matrix(dat=NA, ncol=4, nrow=42)
n = n+1
}
}
write.csv(vect,file="cashflows.csv")
}
getbalancesheets <- function() {
require(quantmod)
companies <- read.csv("companies.csv")
tickers <- as.character(companies$tickers)
vect <- list()
n <- 1
for(i in tickers) {
prospective <- tryCatch(getFinancials(i,auto.assign = FALSE),
error=function(e) {
e
})
matr <- matrix()
if(!inherits(prospective,"error") && nrow(matr <- viewFinancials(prospective,type = 'BS',period = 'A'))) {
a <- 1
while(a <= length(colnames(matr))) {
colnames(matr)[a] <- sub("[-][0-9]*[-][0-9]*","",paste(i,colnames(matr)[a]))
a = a + 1
}
vect[[n]] <- matr
n = n+1
} else {
vect[[n]] <- matrix(dat=NA, ncol=4, nrow=42)
n = n+1
}
}
write.csv(vect,file="balancesheets.csv")
}
getbalancesheets()
getbalancesheets()
balancesheets <- read.csv("~/econ20/R Paper/Discrete/balancesheets.csv", header=FALSE)
View(balancesheets)
getcashflows()
getincomestatements()
getcashflows()
getcashflows <- function() {
companies <- read.csv("companies.csv")
tickers <- as.character(companies$tickers)
vect <- list()
n <- 1
for(i in tickers) {
prospective <- tryCatch(getFinancials(i,auto.assign = FALSE),
error=function(e) {
e
})
matr <- matrix()
if(!inherits(prospective,"error") && nrow(matr <- viewFinancials(prospective,type = 'CF',period = 'A'))) {
a <- 1
while(a <= length(colnames(matr))) {
colnames(matr)[a] <- sub("[-][0-9]*[-][0-9]*","",paste(i,colnames(matr)[a]))
a = a + 1
}
vect[[n]] <- matr
n = n+1
} else {
vect[[n]] <- matrix(dat=NA, ncol=4, nrow=19)
n = n+1
}
}
write.csv(vect,file="cashflows.csv")
}
getincomestatements <- function() {
companies <- read.csv("companies.csv")
tickers <- as.character(companies$tickers)
vect <- list()
n <- 1
for(i in tickers) {
prospective <- tryCatch(getFinancials(i,auto.assign = FALSE),
error=function(e) {
e
})
matr <- matrix()
if(!inherits(prospective,"error") && nrow(matr <- viewFinancials(prospective,type = 'IS',period = 'A'))) {
a <- 1
while(a <= length(colnames(matr))) {
colnames(matr)[a] <- sub("[-][0-9]*[-][0-9]*","",paste(i,colnames(matr)[a]))
a = a + 1
}
vect[[n]] <- matr
n = n+1
} else {
vect[[n]] <- matrix(dat=NA, ncol=4, nrow=49)
n = n+1
}
}
write.csv(vect,file="incomestatements.csv")
}
getincomestatements()
getcashflows()
test <- collectmarketdata()
View(test)
test <- collectmarketdata()
View(test)
balancesheets <- read.csv("~/econ20/R Paper/Discrete/data/balancesheets.csv", header=FALSE)
View(balancesheets)
collectmarketprofitability <- function(x, BS, CF, IS){
# CollectMarketProfitability collects data on overall profitability
## In the market for individual companies for later processing.
## x is the list of companies to be processed. BS, CF, IS are financial statements.
numCompanies <- length(x$tickers)
profitability <- rep(0, numCompanies)
GPOA <- rep(0, numCompanies)
ROE <- rep(0, numCompanies)
ROA <- rep(0, numCompanies)
CFOA <- rep(0, numCompanies)
GMAR <- rep(0, numCompanies)
ACC <- rep(0, numCompanies)
for(i in 1:numCompanies){
print((4*i) - 2)
cBS <- BS[,(4*i)-2]
cCF <- CF[,(4*i)-2]
cIS <- IS[,(4*i)-2]
#GPOA = (revenue - cost of goods sold)/(total assets)
#?#GROSS PROFITS OVER TOTAL ASSETS. THIS CAN BE EASILY FOUND.
#Cost of goods sold = Beginning Inventory + Inventory Purchases - End Inventory
##Gross profit - Income statement
##Total assets - in balance sheet.
GPOA[i] = cIS[5]/cBS[17]
#ROE
# Net income /book equity
# Net income - Cash flow
#?#Book equity = Total equity (BS)
ROE[i] = cCF[1]/cBS[39]
#ROA
#Net income / Total assets
# Net income - CF
# Total assets - BS
ROA[i] = cCF[1]/cBS[17]
#CFOA
#(net income + depreciation - (change in working capital) - capital expenditures)/(total assets)
# Net income - CF
# Depreciation - IS
# Change in working capital - CF
# Capital Expenditures - CF
# Total assets - BS
CFOA[i] = (cCF[1] + cIS[8] - cCF[6] - cCF[8])/cBS[17]
#GMAR
# (Revenue - costs of goods sold)/(total sales)
# = Gross profit/(total sales)
#?# Using different equation:
# Gross profit/ (Total revenue)
#Gross profit - IS
#Total Revenue - IS
GMAR[i] = cIS[5]/cIS[3]
#ACC
# (depreciation - changes in working capital)/(total assets)
#*# Going from equation they show. Slight difference from their own
## words.
# Depreciation - CF
# Changes in working capital - CF
# Total assets - BS
ACC[i] = (cIS[8] - cCF[6])/cBS[17]
}
#Scale converts the individual scores for these values into z-scores.
GPOA <- scale(GPOA)
ROE <- scale(ROE)
ROA <- scale(ROA)
CFOA <- scale(CFOA)
GMAR <- scale(GMAR)
ACC <- scale(ACC)
GPOA[is.nan(GPOA)] <- 0
ROE[is.nan(ROE)] <- 0
ROA[is.nan(ROA)] <- 0
CFOA[is.nan(CFOA)] <- 0
GMAR[is.nan(GMAR)] <- 0
ACC[is.nan(ACC)] <- 0
for(i in 1:numCompanies){
profitability[i] <- GPOA[i] + ROE[i] + ROA[i] + CFOA[i] + GMAR[i] + ACC[i]
}
scale(profitability)
}
test <- collectmarketdata()
View(test)
round(test, digits=3)
test <- round(test, digits=3)
View(test)
install.packages("roxygen2")
roxygen2::roxygenise()
View(BS)
cISm1y <- IS[,(4*i)-1]
collectmarketpayout <- function(x, BS, CF, IS){
# CollectMarketPayout collects data on overall payouts
## In the market for individual companies for later processing.
## x is the list of companies to be processed. BS, CF, IS are financial statements.
numCompanies <- length(x$tickers)
payouts <- rep(0, numCompanies)
EISS <- rep(0, numCompanies)
DISS <- rep(0, numCompanies)
NPOP <- rep(0, numCompanies)
for(i in 1:numCompanies){
cBS <- BS[,(4*i)-2]
cBSm1y <- BS[,(4*i)-1]
cBSm2y <- BS[,(4*i)]
cBSm3y <- BS[,(4*i)+1]
cCF <- CF[,(4*i)-2]
cCFm1y <- CF[,(4*i)-1]
cCFm2y <- CF[,(4*i)]
cCFm3y <- CF[,(4*i)+1]
cIS <- IS[,(4*i)-2]
cISm1y <- IS[,(4*i)-1]
cISm2y <- IS[,(4*i)]
cISm3y <- IS[,(4*i)+1]
#EISS
# Issuance (retirement) of stock, net - CF 13
##Total number of Shares - BS 42
EISS[i] <- -log(cBS[42]/cBSm1y[42])
#DISS
# Issuance (retirement) of debt, net - CF 14
#Total debt - BS 27
DISS[i] <- -log(cBS[27]/cBSm1y[27])
#NPOP
# (Net income - changes in book equity) / (total profits over the past 5 years)
# Net income - CF 1
# Total equity - BS 39
# Gross profits - IS 5
totalNetPayouts <- (cCF[1] - cBS[39]) + (cCFm1y[1] - cBSm1y[39]) + (cCFm2y[1] - cBSm2y[39]) + (cCFm3y[1] - cBSm3y[39])
totalProfits <- cIS[5] + cISm1y[5] + cISm2y[5] + cISm3y[5]
NPOP[i] <- totalNetPayouts/totalProfits
}
#Scale converts the individual scores for these values into z-scores.
EISS <- scale(EISS)
DISS <- scale(DISS)
NPOP <- scale(NPOP)
EISS[is.nan(EISS)] <- 0
DISS[is.nan(DISS)] <- 0
NPOP[is.nan(NPOP)] <- 0
for(i in 1:numCompanies){
payouts[i] <- EISS[i] + DISS[i] + NPOP[i]
}
scale(payouts)
}
collectmarketdata <- function(){
##Collect market data focuses on collecting needed
##  means and sd's for use in other functions.
#We need:
# gross profits over assets (GPOA)
# Return on equity (ROE)
# return on assets (ROA)
# Cash flow over assets (GPOA)
# Gross margin (GMAR)
# Fraction of earnings composed of cash
#   i.e., low accruals, ACC
companies <- read.csv("data/companies.csv")
numCompanies <- length(companies$tickers)
BS <- read.csv("data/balancesheets.csv")
CF <- read.csv("data/cashflows.csv")
IS <- read.csv("data/incomestatements.csv")
#What to do with missing data?
# If we're missing a lot of data, then simply assigning 0's skews
# the mean and SD. However, short term solution to getting a result.
BS[is.na(BS)] <- 0
CF[is.na(CF)] <- 0
IS[is.na(IS)] <- 0
profitability <- collectmarketprofitability(companies, BS, CF, IS)
growth <- rep(0, numCompanies)
safety <- rep(0, numCompanies)
payouts <- collectmarketpayout(companies, BS, CF, IS)
###SAFETY
#BAB
# - market beta
# Use PerformanceAnalytics
payouts
}
test <- collectmarketdata()
View(test)
test <- round(test, digits=3)
View(test)
