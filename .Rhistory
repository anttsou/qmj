<<<<<<< HEAD
BikeData$age[7]
table(BikeData$cyc_freq[BikeData$user_id <= 10])
BikeData[,BikeData$cyc_freq == "Less than once a month"]
BikeData[BikeData$cyc_freq == "Less than once a month",6]
cyless <- BikeData$cyc_freq == BikeData$cyc_freq == "Less than once a month"
cyless <- BikeData$cyc_freq == BikeData[BikeData$cyc_freq == "Less than once a month"]
cyless <- BikeData[BikeData$cyc_freq == "Less than once a month"]
cyless <- BikeData$cyc_freq[BikeData == "Less than once a month"]
cyless
length(cyless)
females <- BikeData[BikeData$gender == 'F']
females <- BikeData[BikeData$gender == 'F',]
females
femalesless <- females$cyc_freq == 'Less than once a month'
femalesless[1]
femalesless <- females[females$cyc_freq == 'Less than once a month',]
femalesless
femalesless[1]
femalesless$speed[1]
table(BikeData$student)
student <- BikeData[BikeData$student == 1,]
table(student$cyc_freq)
distance <- student$distance
distance
mean(distance)
bleh <- c(10, 2, 6, 12, 14, 15, 15, 24, 15, 25, 3, 12)
mean(bleh)
?sd
?sd
sd(bleh)
?order
order(bleh)
order(bleh, decreasing = FALSE)
bleh
sort.list(bleh)
order(bleh, na.last = TRUE, decreasing = FALSE)
sort.list(bleh)
sort(bleh, decreasing=FALSE)
order(bleh,decreasing=FALSE)
length(bleh)
sort(bleh, decreasing=FALSE)
mean(bleh)
bleh <- c(10,2,6,12,14,15,15,24,15,25,3,12)
sort(bleh, decreasing=FALSE)
3.5/2.1
5/3.3
library(SDSFoundations)
animaldata <- AnimalData
mean(animaldata)
mean(animaldata$Age.Intake)
median(animaldata$Age.Intake)
sd(animaldata$Age.Intake)
fivenum(animaldata$Age.Intake)
View(animaldata)
head(animaldata)
table(animaldata$Gender)
table(animaldata$Sex)
plot(animaldata$Sex)
plot(animaldata$Sex, main='Bar Chart')
plot(animaldata$Sex, main='Bar Chart',xlab='Animal Gender', ylab='Number')
hist(animaldata$Age.Intake)
femaleage <- animaldata$Age.Intake[animaldata$Sex == 'Female']
maleage <- animaldata$Age.Intake[animaldata$Sex == 'Male']
hist(femaleage, main='Histogram of Female Ages')
hist(maleage, main = 'Histogram of Male Ages')
hist(maleage, main = 'Histogram of Male Ages',breaks=5)
hist(maleage, main = 'Histogram of Male Ages',breaks=15)
hist(maleage, main = 'Histogram of Male Ages',breaks=1)
hist(maleage, main = 'Histogram of Male Ages',breaks=15)
max(maleage)
max(femaleage)
which(animaldata$Age.Intake==17)
animaldata[415,]
head(animaldata, n=10)
first(animaldata$Neutered.Status[animaldata$Intake.Type == 'Owner Surrender'])
animaldata$Neutered.Status[animaldata$Intake.Type == 'Owner Surrender'][1]
animaldata$Neutered.Status[animaldata$Intake.Type == 'Owner Surrender']
#Find the number of animals that were adopted
table(animaldata$Outcome.Type)
#Pull out only adopted animals
adopted <- animaldata[animaldata$Outcome.Type=="Adoption",]
#Pull out just the days in shelter for the adopted animals
daystoadopt <- adopted$Days.Shelter
#Visualize and describe this variable
hist(daystoadopt)
fivenum(daystoadopt)
mean(daystoadopt)
sd(daystoadopt)
which(animaldata$Days.Shelter==max(daystoadopt))
211/35.71547
(211-29.26471)/35.71547
animaldata[425,]
table(animaldata$Animal.Type)
adults <- animals$Weight[animals$Age >= 1]
adultdog <- animaldata$Weight[animaldata$Age >= 1, animaldata$Animal.Type == 'Dog']
adultdog <- animaldata$Weight[animaldata$Age >= 1 && animaldata$Animal.Type == 'Dog']
adultcat <- animaldata$Weight[animaldata$Age >= 1 && animaldata$Animal.Type == 'Cat']
hist(adultdog)
hist(adultcat)
hist(adultcat)
animals <- table(animaldata$Animal.Type[animaldata$Age >= 1])
animals
adultcat <- animaldata$Weight[animaldata$Age >= 1 && animaldata$Animal.Type == 'Cat']
hist(adultcat)
hist(adultcat, breaks=10)
adultcat
adultdog
adultdog <- animaldata$Weight[animaldata$Age.Intake >= 1 && animaldata$Animal.Type == 'Dog']
adultcat <- animaldata$Weight[animaldata$Age.Intake >= 1 && animaldata$Animal.Type == 'Cat']
hist(adultdog)
hist(adultcat)
adultdog <- animaldata$Weight[animaldata$Age.Intake >= 1 & animaldata$Animal.Type == 'Dog']
adultcat <- animaldata$Weight[animaldata$Age.Intake >= 1 & animaldata$Animal.Type == 'Cat']
hist(adultdog)
hist(adultcat)
hist(adultdog)
hist(adultcat)
mean(adultcat)
sd(adultcat)
(13-8.603571)/1.911517
1-pnorm(2.299969)
fivenum(adultdog)
8.6 - (2 * 1.9)
8.6 - (3 * 1.9)
8.6 + (2 * 1.9)
fivenum(adultcat)
table(animaldata$Intake.Type)
table(animaldata$Intake.Type[animaldata$Animal.Type == 'Dog'])
81/(1 + 81 + 20 + 189)
table(animaldata$Outcome.Type[animaldata$Animal.Type == 'Dog' & animaldata$Intake.Type == 'Owner Surrender'])
mean(animaldata$Animal.Type == 'Dog' & animaldata$Intake.Type == 'Owner Surrender' & animaldata$Outcome.Type == 'Return to Owner')
animaldata$Animal.Type == 'Dog' & animaldata$Intake.Type == 'Owner Surrender' & animaldata$Outcome.Type == 'Return to Owner'
mean(animaldata$Days.Shelter[animaldata$Animal.Type == 'Dog' & animaldata$Intake.Type == 'Owner Surrender' & animaldata$Outcome.Type == 'Return to Owner'])
library(SDSFoundations)
bull <- BullRiders
View(bull)
plot(bull$YearsPro, bull$BuckOuts)
plot(bull$YearsPro, bull$BuckOuts, xlab='Years Pro', ylab='Buck Outs', main='Buck Outs vs Years Pro')
abline(lm(bull$BuckOuts~bull$YearsPro))
plot(bull$Events, bull$BuckOuts)
abline(lm(bull$BuckOuts~bull$YearsPro))
abline(lm(bull$Buckouts~bull$Events))
abline(lm(bull$Buckouts~bull$Events))
plot(bull$Events, bull$BuckOuts)
abline(lm(bull$Buckouts~bull$Events))
abline(lm(bull$Buckouts~bull$Events))
abline(lm(bull$BuckOuts~bull$Events))
cor(bull$YearsPro, bull$BuckOuts)
cor(bull$Events, bull$BuckOuts)
cor(bull$Events, bull$BuckOuts)^2
cor(bull$Events, bull$BuckOuts)
myvars <- c("Years Pro", "Events", "BuckOuts")
cor(bull[, myvars])
myvars <- c("Years Pro", "Events", "BuckOuts")
cor(bull[, myvars])
cor(bull[,myvars])
myvars <- c("YearsPro", "Events", "BuckOuts")
cor(bull[,myvars])
plot(bull)
histo(bull)
plot(bull$Events, bull$YearsPro)
40 + 22 + 19 + 45 + 10 + 12
32/148
(40+22+19)/148
10/(10+ 12 + 45)
40/45
40/85
40/(40 + 22 + 19)
(40+22+19)/148
10/(148)
40/85
40/(40 + 22 + 19)
(45+10+12)/148
45/148
.304/(.453)
library(SDSFoundations)
acl <- AustinCityLimits
acl
table(acl$Grammy)
View(acl)
gtab <- table(acl$Grammy)
prop.table(gtab)
gtab2 <- table(acl$Grammy, acl$Gender)
gtab2
prop.table(gtab2)
prop.table(gtab2, 1)
prop.table(gtab2, 2)
prop.table(gtab2, 1)
barplot(acl$Grammy)
barplot(gtab)
barplot(gtab2)
#main, xlab, ylab
barplot(gtab2,legend=true)
barplot(gtab2,legend=t)
barplot(gtab2,legend='T')
barplot(gtab2,legend=T)
barplot(gtab2,main='Gender by Grammy Winner', beside=T, legend=T)
barplot(prop.table(gtab2,2))
barplot(prop.table(gtab2,1), legend=T, beside=T)
head(acl, 10)
table(head(acl$Grammy, 10)
table(head(acl$Grammy, 10))
head(acl$Grammy, 10)
table(acl$Grammy)
table(head(acl$Grammy, 10))
head(acl$Genre[acl$Age > 60])
head(acl$Genre[acl$Age > 60], 1)
genre <- table(acl$Genre)
genre
gender <- table(acl$Gender)
gender
# Create contingency table
twoway <- table (acl$Gender,acl$Genre)
twoway
# Visualize the counts
barplot(twoway, legend=T, beside=T)
# Calculate P(A): the probability of each genre being played
prop.table(genre)
# Calculate P(A|B): the probability of each genre being played, given the artistâ€™s gender
prop.table(twoway,1)
gender
genre
twoway
prop.table(twoway,1)
prop.table(genre)
prop.table(twoway,1)
prop.table(genre)
barplot(twoway, legend=T, beside=T)
table(acl$Genre, acl$Grammy)
t1 <- table(acl$Genre, acl$Grammy)
table(acl$Grammy)
49/67
49/(67+49)
prop.table(t1)
prop.table(t1, 1)
prop.table(t1, 2)
prop.table(t1, 1)
prop.table(genre)
prop.table(acl$Grammy)
prop.table(table(acl$Grammy)
prop.table(table(acl$Grammy))
table(acl$Grammy)
prop.table(table(acl$Grammy))
prop.table(t1,1)
library(SDSFoundations)
wr <- WorldRecords
wr
linFit(wr$Year, wr$Gender)
mens800 <- wr(wr$Event == 'Mens 800m')
mens800 <- wr[wr$Event == 'Mens 800m']
View(wr)
mens800 <- wr[wr$Event == 'Mens 800m']
mens800 <- wr[wr$Event == 'Mens 800m',]
linFit(mens800$Year, mens800$Record)
library(SDSFoundations)
wb <- WorldBank
wb <- WorldBankData
View(wb)
ukwb <- wb[wb$Country.Code == 'GBR',]
ukwb
gbr2000 <- ukwb[gb$year >= 2000 & gb$year < 2010]
gbr2000 <- ukwb[ukwb$year >= 2000 & ukwb$year < 2010]
gbr2000 <- ukwb[ukwb$year >= 2000 & ukwb$year < 2010,]
time <- gbr2000 - 2000
time <- gbr2000$year - 2000
time
mv <- gbr2000$Motor.vehicles
plot(time, mv)
mv
mv <- gbr2000$motor.vehicles
plot(time, mv)
expFit(time, mv)
logisticFit(time, mv)
tripleFit(time, mv)
linFit(time, mv)
logisticFit(time, mv)
tripleFit(time, mv)
expFitPred(time, mv, 5000000000)
expFitPred(time, mv, 500000)
expFitPred(time, mv, 50)
expFitPred(time, mv, 5)
expFitPred(time, mv, 10)
logisticFitPred(time, mv, 10)
expFitPred(time, mv, 10)
logisticFitPred(time, mv, 10)
library(SDSFoundations)
survey <- StudentSurvey
View(survey)
mean(survey$Age)
mean(survey$age)
sd(survey$age)
plot(survey$age)
barplot(survey$age)
hist(survey$age)
sample(survey$age, 10)
hist(sample(survey$age, 20))
hist(sample(survey$age, 40))
hist(sample(survey$age, 40))
hist(sample(survey$age, 40))
hist(sample(survey$age, 40))
hist(sample(survey$age, 40))
hist(sample(survey$age, 40))
hist(sample(survey$age, 40))
hist(sample(survey$age, 40))
hist(sample(survey$age, 40))
hist(sample(survey$age, 40))
hist(sample(survey$age,size=40))
hist(sample(survey$age,size=40))
hist(sample(survey$age,size=40))
hist(sample(survey$age,size=40))
hist(sample(survey$age,size=40))
sample(survey$age, size=40)
myxbar <- rep(NA, 1000)
myxbar[i] <- mean(mysamp)
myxbar <- rep(NA, 1000)
for (i in 1:1000){
mysamp <- sample(survey$age, size=30)
myxbar[i] <- mean(mysamp)
}
hist(myxbar)
myxbar <- rep(NA, 1000)
for (i in 1:1000){
mysamp <- sample(survey$age, size=90)
myxbar[i] <- mean(mysamp)
}
hist(myxbar)
mean(myxbar)
sd(myxbar)
sd(survey$age/(sqrt(90)))
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "a1078d4fb7a6e0a2a702", "MISSING SECRET")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages("httpuv")
install.packages("httpuv")
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "a1078d4fb7a6e0a2a702", "MISSING SECRET")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", "a1078d4fb7a6e0a2a702", "MISSING SECRET")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?Sys.setenv
Sys.setenv(GITHUB_CONSUMER_SECRET = "3cebe5f47ec94817aedbbed51b0227a3b8c6916a")
oauth_endpoints("github")
myapp <- oauth_app("github", client_id, "MISSING SECRET")
client_id = "a1078d4fb7a6e0a2a702"
Sys.setenv(GITHUB_CONSUMER_SECRET = "3cebe5f47ec94817aedbbed51b0227a3b8c6916a")
oauth_endpoints("github")
myapp <- oauth_app("github", client_id, "MISSING SECRET")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
client_id = "a1078d4fb7a6e0a2a702"
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", client_id, "MISSING SECRET")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github", client_id, "3cebe5f47ec94817aedbbed51b0227a3b8c6916a")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
dat <- content(req)
dat
names(dat)
dat[[1]]
names(dat[[1]])
dat[[1]]$created_at
install.packages("sqldf")
fileUrl <- ""
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
dest <- paste(getwd(), "sql.csv", sep='')
file.download(fileUrl, dest)
?download.file
download.file(fileUrl, destfile <- dest)
dest <- paste(getwd(), "\sql.csv", sep='')
download.file(fileUrl, destfile <- dest)
dest <- paste(getwd(), "/sql.csv", sep='')
download.file(fileUrl, destfile <- dest)
getwd()
r
R
?version
R.Version()
c1 <- download.files("http://www.bloomberg.com/quote/GMEXICOB:MM")
c1 <- "http://www.bloomberg.com/quote/GMEXICOB:MM"
c1Name <- "GMEXICOB:MM"
?download_file
?file_download
?
library
library("bitops", lib.loc="~/R/win-library/3.1")
detach("package:bitops", unload=TRUE)
library("tools", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("utils", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("stats", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("spatial", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("parallel", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("MASS", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("graphics", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("foreign", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("ws.data", lib.loc="~/R/win-library/3.1")
library("sqldf", lib.loc="~/R/win-library/3.1")
library("SDSFoundations", lib.loc="~/R/win-library/3.1")
library("rstudio", lib.loc="~/R/win-library/3.1")
?download_file
?file_download
library("bitops", lib.loc="~/R/win-library/3.1")
library("chron", lib.loc="~/R/win-library/3.1")
library("data.table", lib.loc="~/R/win-library/3.1")
library("digest", lib.loc="~/R/win-library/3.1")
library("hash", lib.loc="~/R/win-library/3.1")
library("httpuv", lib.loc="~/R/win-library/3.1")
library("httr", lib.loc="~/R/win-library/3.1")
library("jpeg", lib.loc="~/R/win-library/3.1")
library("jsonlite", lib.loc="~/R/win-library/3.1")
library("manipulate", lib.loc="~/R/win-library/3.1")
library("mime", lib.loc="~/R/win-library/3.1")
library("orderbook", lib.loc="~/R/win-library/3.1")
library("plyr", lib.loc="~/R/win-library/3.1")
library("R6", lib.loc="~/R/win-library/3.1")
library("Rcpp", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
library("reshape2", lib.loc="~/R/win-library/3.1")
library("rJava", lib.loc="~/R/win-library/3.1")
library("stringr", lib.loc="~/R/win-library/3.1")
library("swirl", lib.loc="~/R/win-library/3.1")
library("testthat", lib.loc="~/R/win-library/3.1")
library("xlsx", lib.loc="~/R/win-library/3.1")
library("XML", lib.loc="~/R/win-library/3.1")
library("yaml", lib.loc="~/R/win-library/3.1")
library("boot", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.2/library")
detach("package:KernSmooth", unload=TRUE)
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("grDevices", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("class", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("cluster", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("codetools", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("compiler", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("Matrix", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("methods", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("mgcv", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("nlme", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("nnet", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("rpart", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("splines", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("stats4", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("survival", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("tcltk", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("translations", lib.loc="C:/Program Files/R/R-3.1.2/library")
?download_file
?file_download
library(utils)
?download_file
?file_download
install.packages("devtools")
devtools.create("qmj")
library(quantmod)
?readSymbols
?readSymbol
test <- getSymbols("GOOG", src = 'google')
View(GOOG)
getQuote("GOOG")
library(qmj)
qmj::update()
print(paste("Downloading data to : ", system.file("data", package="qmj"), sep='')
print(paste("Downloading data to : ", system.file("data", package="qmj"), sep=''))
print(paste("Downloading data to : ", system.file("data", package="qmj"), sep=''))
library(qmj)
data(package='qmj')
head(companies)
test <- read.csv(companies)
test <- companies
View(test)
test <- ZU
View(test)
?quantmod
library(roxygen2)
roxygenize(".")
setwd("econ20/R Paper/Discrete")
roxygenize(".")
roxygenize(".")
devtools::install_github("rynkwn/qmj")
library(qmj)
?qmj
=======
1-pbinom(50,150,0.25)
50/150
1-pbinom(51,150,0.25)
1-pbinom(43,150,0.25)
1-pbinom(45,150,0.25)
1-pbinom(46,150,0.25)
46/150
1-pbinom(50,150,0.25)
1-pbinom(49,150,0.25)
50/150
pbinom(50,150,0.25)
pbinom(50,150,0.75)
pbinom(50,150,0.3)
pbinom(49,150,0.3)
pbinom(30,150,0.3)
pbinom(40,150,0.3)
pbinom(35,150,0.3)
pbinom(50,200,0.3)
pbinom(50,200,0.25)
1-pbinom(50,200,0.25)
1-pbinom(50,150,0.25)
1-pbinom(60,200,0.25)
1-pbinom(65,200,0.25)
1-pbinom(64,200,0.25)
pbinom(64,200,0.3)
pbinom(64,1000,0.3)
pbinom(100,1000,0.3)
pbinom(200,1000,0.3)
pbinom(300,1000,0.3)
pbinom(250,1000,0.3)
pbinom(280,1000,0.3)
pbinom(281,1000,0.3)
1-pbinom(260,1000,0.25)
1-pbinom(280,1000,0.25)
pbinom(400,1200,0.3)
pbinom(300,1200,0.3)
pbinom(350,1200,0.3)
pbinom(339,1200,0.3)
pbinom(330,1200,0.3)
pbinom(333,1200,0.3)
pbinom(334,1200,0.3)
1-pbinom(333,1200,0.25)
pbinom(400,1500,0.3)
pbinom(500,1500,0.3)
pbinom(450,1500,0.3)
pbinom(449,1500,0.3)
1-pbinom(449,1500,0.25)
1-pbinom(250,1300,0.25)
1-pbinom(350,1300,0.25)
1-pbinom(340,1300,0.25)
1-pbinom(360,1300,0.25)
1-pbinom(361,1300,0.25)
1-pbinom(362,1300,0.25)
pbinom(362,1300,0.3)
46/50
46/150
362/1300
df = function(s1,s2,n1,n2) {
num=(s1^2/n1 + s2^2/n2)^2
den=((s1^2/n1)^2/(n1-1) +(s2^2/n2)^2/(n2-1))
num/den
}
df = function(s1,s2,n1,n2) {
num=(s1^2/n1 + s2^2/n2)^2
den=((s1^2/n1)^2/(n1-1) +(s2^2/n2)^2/(n2-1))
num/den
}
df = function(s1,s2,n1,n2) {num=(s1^2/n1 + s2^2/n2)^2
den=((s1^2/n1)^2/(n1-1) +(s2^2/n2)^2/(n2-1))
num/den
}
http://sites.williams.edu/rdeveaux/files/2014/09/Juul.txt
IGF = read.delim("http://sites.williams.edu/rdeveaux/files/2014/09/Juul.txt")
IGF
over13 = subset(IGF,age > 13)
over13
over13
female = subset(over13, sex == "F")
female
male = subset(over13, sex == "M")
male
mean(female$igf)
mean(male$igf)
(418.734 - 388.5117)/530.9
(418.734 - 388.5117)/(sqrt(530.9))
sd(female$igf)
sd(male$igf)
s1 = sd(female$igf)
s2 = sd(male$igf)
n1 = length(female)
n1
female
n = length(female$igf)
n
y1 - y2
y1 = mean(female$igf)
y2 = mean(male$igf)
y1
y2
y1 - y2
stderror = sqrt(((s1^2)/n1) + ((s2^2)/n2))
n1 = length(female$igf)
n2 = length(male$igf)
stderror = sqrt(((s1^2)/n1) + ((s2^2)/n2))
stderror
(y1 - y2)/(stderror)
t = (y1 - y2)/(stderror)
t*stderror
57.1 - 30.22229
26.87771/2.203
30.22229 - 26.87771
n1
n2
sd(over13$igf)
2*6436341*6436343
? qt
? qz
library(MASS)
cars93
Cars93
http://sites.williams.edu/rdeveaux/files/2014/09/Cups.txt
Cups = read.delim("http://sites.williams.edu/rdeveaux/files/2014/09/Cups.txt")
aov.Cups=aov(Difference~Container,data=Cups)
summary(aov.Cups)
plot(residuals(aov.Cups)~predict(aov.Cups))
plot(residuals(aov.Cups)~predict(aov.Cups))
with(Cups,pairwise.t.test(Difference,Container,p.adjust="bonferroni"))
>with(Cups,pairwise.t.test(Difference,Container,p.adjust="none"))
with(Cups,pairwise.t.test(Difference,Container,p.adjust="none"))
with(Cups,pairwise.t.test(Difference,Container,p.adjust="bonferroni"))$p.value<.05
with(Cups,pairwise.t.test(Difference,Container,p.adjust="none"))$p.value<.05
salaries <- read.csv("~/Downloads/salaries.txt")
View(salaries)
require(mosaic)
with(salaries, mosaicplot(table(education,income),col=rainbow(14)))
with(salaries, mosaicplot(table(education.num,income),col=rainbow(14)))
table(education,income)
with(salaries,table(education,income))
with(salaries, mosaicplot(table(education.num,income),col=rainbow(2)))
with(salaries, mosaicplot(table(education.num,income),col=rainbow(2),main = "Education Level vs. Income with respect to $50K"))
with(salaries, mosaicplot(table(education.num,income),col=rainbow(2),main = "Education Level vs. Income with Respect to $50K"))
USsalaries <- subset(salaries,native.country=="United-States")
USsalaries
subset(salaries,native.country=="United-States")
subset(salaries,native.country==" United-States")
educationvincome = with(USsalaries, table(education, income))
educationvincome <- with(USsalaries, table(education, income))
mosaicplot(educationvincome,
col=rainbow(2),
main = "Education Level vs. Income with Respect to $50K",
xlab = "Education Level",
ylab = "Income with Respect to $50K")
educationvincome <- with(USsalaries, table(education.num, income))
mosaicplot(educationvincome,
col=rainbow(2),
main = "Education Level vs. Income with Respect to $50K",
xlab = "Education Level",
ylab = "Income with Respect to $50K")
educationvincome = with(USsalaries, table(education.num, income))
mosaicplot(educationvincome,
col=rainbow(2),
main = "Education Level vs. Income with Respect to $50K",
xlab = "Education Level",
ylab = "Income with Respect to $50K")
require(mosaic)
mosaicplot(educationvincome,
col=rainbow(2),
main = "Education Level vs. Income with Respect to $50K",
xlab = "Education Level",
ylab = "Income with Respect to $50K")
education.income <- with(salaries.us, table(education.num, income))
salaries.us <- subset(salaries, native.country == " United-States")
education.income <- with(salaries.us, table(education.num, income))
mosaicplot(education.income,
col=rainbow(2),
main = "Education Level vs. Income with Respect to $50K",
xlab = "Education Level",
ylab = "Income with Respect to $50K")
salaries <- read.csv("~/Downloads/salaries.txt")
mosaicplot(race.income,
col=rainbow(2),
main = "Race vs. Income with Respect to $50K",
xlab = "Race",
ylab = "Income with Respect to $50K")
race.income <- with(salaries.us, table(race,income))
mosaicplot(race.income,
col=rainbow(2),
main = "Race vs. Income with Respect to $50K",
xlab = "Race",
ylab = "Income with Respect to $50K")
salaries.us$race <- ordered(salaries.us$race, levels = c("API", "Black", "AIE", "White", "Other"))
race.income <- with(salaries.us, table(race,income))
mosaicplot(race.income,
col=rainbow(2),
main = "Race vs. Income with Respect to $50K",
xlab = "Race",
ylab = "Income with Respect to $50K")
race.income <- with(salaries.us, table(salaries.us$race, salaries.us$income))
mosaicplot(race.income,
col=rainbow(2),
main = "Race vs. Income with Respect to $50K",
xlab = "Race",
ylab = "Income with Respect to $50K")
# Import dataset
salaries <- read.csv("~/Downloads/salaries.txt")
# Subset data to only US citizens
salaries.us <- subset(salaries, native.country == " United-States")
# Create data table with just education level and income
education.income <- with(salaries.us, table(education.num, income))
# Plot mosaic plot of education level versus income
mosaicplot(education.income,
col = rainbow(2),
main = "Education Level vs. Income with Respect to $50K",
xlab = "Education Level",
ylab = "Income with Respect to $50K")
Xsq.edusalaries = chisq.test(education.income)
Xsq.edusalaries
Xsq.edusalaries$observed
Xsq.edusalaries$expected
sex.income <- with(salaries.us, table(sex,income))
mosaicplot(sex.income,
col=rainbow(2),
main = "Sex vs. Income with Respect to $50K",
xlab = "Sex",
ylab = "Income with Respect to $50K")
Xsq.sexsalaries = chisq.test(sex.income)
Xsq.sexsalaries
Xsq.sexsalaries$observed
Xsq.sexsalaries$expected
salaries.us$race <- ordered(salaries.us$race, levels = c("API", "Black", "AIE", "White", "Other"))
race.income <- with(salaries.us, table(race,income))
race.income <- with(salaries.us, table(salaries.us$race, salaries.us$income))
mosaicplot(race.income,
col=rainbow(2),
main = "Race vs. Income with Respect to $50K",
xlab = "Race",
ylab = "Income with Respect to $50K")
Xsq.racesalaries = chisq.test(race.income)
Xsq.racesalaries
Xsq.racesalaries$observed
Xsq.racesalaries$expected
require(mosaic)
# Import dataset
salaries <- read.csv("~/Downloads/salaries.txt")
# Subset data to only US citizens
salaries.us <- subset(salaries, native.country == " United-States")
# Create data table with just education level and income
education.income <- with(salaries.us, table(education.num, income))
# Plot mosaic plot of education level versus income
mosaicplot(education.income,
col = rainbow(2),
main = "Education Level vs. Income with Respect to $50K",
xlab = "Education Level",
ylab = "Income with Respect to $50K")
Xsq.edusalaries = chisq.test(education.income)
Xsq.edusalaries
Xsq.edusalaries$observed
Xsq.edusalaries$expected
sex.income <- with(salaries.us, table(sex,income))
mosaicplot(sex.income,
col=rainbow(2),
main = "Sex vs. Income with Respect to $50K",
xlab = "Sex",
ylab = "Income with Respect to $50K")
Xsq.sexsalaries = chisq.test(sex.income)
Xsq.sexsalaries
Xsq.sexsalaries$observed
Xsq.sexsalaries$expected
salaries.us$race <- ordered(salaries.us$race, levels = c("API", "Black", "AIE", "White", "Other"))
race.income <- with(salaries.us, table(race,income))
race.income <- with(salaries.us, table(salaries.us$race, salaries.us$income))
mosaicplot(race.income,
col=rainbow(2),
main = "Race vs. Income with Respect to $50K",
xlab = "Race",
ylab = "Income with Respect to $50K")
Xsq.racesalaries = chisq.test(race.income)
Xsq.racesalaries
Xsq.racesalaries$observed
Xsq.racesalaries$expected
race.income <- with(salaries.us, table(race,income))
mosaicplot(race.income,
col=rainbow(2),
main = "Race vs. Income with Respect to $50K",
xlab = "Race",
ylab = "Income with Respect to $50K")
View(race.income)
?factor
mosaicplot(education.income,
col = rainbow(2),
main = "Education Level versus Income",
xlab = "Education Level",
ylab = "Income (US dollars)")
mosaicplot(education.income,
col = rainbow(2),
main = "Education Level vs. Income",
xlab = "Education Level (see description of labels below)",
ylab = "Income (US dollars)")
# Create data table with just education level and income
education.income <- with(salaries.us, table(education, income))
# Plot mosaic plot of education level versus income
mosaicplot(education.income,
col = rainbow(2),
main = "Education Level vs. Income",
xlab = "Education Level (see label descriptions below)",
ylab = "Income (US dollars)")
education.income <- with(salaries.us, table(education.num, income))
# Plot mosaic plot of education level versus income
mosaicplot(education.income,
col = rainbow(2),
main = "Education Level vs. Income",
xlab = "Education Level (see label descriptions below)",
ylab = "Income (US dollars)")
Xsq.edusalaries
Xsq.edusalaries$observed
Xsq.edusalaries$expected
Xsq.edusalaries
View(salaries)
length(USsalaries)
USsalaries
salaries.us <- subset(salaries, native.country == " United-States")
length(salaries.us)
length(salaries.us$income)
133/387
(94/387)/(133/387)
94/(94+52+18)
install.packages("ws.data",contriburl="http://www.kanecap.com/R",type="source")
library(ws.data)
help(package="ws.data")
data(daily.1998)
head(daily.1998)
setwd("econ20/R Paper/Discrete/")
source("getfinancials.R")
debug(getfinancials('Q'))
newUrl2
temp
namesvect
namesvect2
tempi
tempindex
k
blank
indices
counter
blank
indices
maxrows
temp
namesvect
namesvect2
namesvect2
temp
maxrows
i
counter
companies$ciks[i]
as.character(companies$ciks[i])
newUrl
blank
indices
htmlCode[243]
newUrl2
temp
pos
pos2
rawlist[[109]][[4]]
rawlist
grepl("CONSOLIDATED",rawlist[[108]][[2]]
)
grepl("CONSOLIDATED",rawlist[[108]][[2]],ignore.case=TRUE)
debugSource('~/econ20/R Paper/Discrete/getfinancials.R')
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
companies <- read.csv("testcsv2.csv")
companies
length(companies$ciks)
indices <- numeric()
length(indices)
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
companies
con <- url(http://www.sec.gov/Archives/edgar/data/1423357/000101054914000613/0001010549-14-000613-index.htm)
con <- url("http://www.sec.gov/Archives/edgar/data/1423357/000101054914000613/0001010549-14-000613-index.htm")
readLines(con)
htmlCode <- readLines(con)
htmlCode[140]
grepl(".*0-9.xml",htmlCode[140])
grepl(".*[0-9].xml",htmlCode[140])
con2 <- url("http://www.sec.gov/Archives/edgar/data/701221/000110465914075195/0001104659-14-075195-index.htm")
grepl(".*[0-9].xml",htmlCode[147])
grepl(".*[0-9].xml",htmlCode[154])
htmlCode2 <- readLines(con2)
grepl(".*[0-9].xml",htmlCode2[147])
grepl(".*[0-9].xml",htmlCode2[154])
source("getfinancials.R")
getfinancials('Q')
companies
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
con <- url("http://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=0001408802")
htmlCode <- readLines(con)
index <- 1
indices <- numeric()
while(index <= length(htmlCode)) {
if(grepl("10-Q",htmlCode[index])) {
indices <- c(indices,index+1)
}
index = index + 1
}
indices
length(indices)
source("getfinancials.R")
debug(getfinancials('Q'))
indices
temp
namesvect
namesvect2
indices
temp
temp
namesvect
namesvect2
i
tempindex
k
length(temp)
length(namesvect)
newUrl
indices
newUrl
indices
newUrl
temp
namesvect
namesvect2
k
tempindex
temp
tempindex
k
counter
indices
newUrl
indices
counter
q
source("getfinancials.R")
getfinancials('Q')
con <- url("www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=0000701221&type=&dateb=&owner=include&start=680&count=40")
con <- url("http://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=0000701221&type=&dateb=&owner=include&start=680&count=40")
htmlCode <- readLines(con)
htmlCode[84]
grepl("Next 40",htmlCode[84])
grepl("Next 40",htmlCode[85])
source("getfinancials.R")
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
companies
as.character(companies$ciks[7])
as.character(companies$ciks[7]) == "N/A"
as.character(companies$ciks[7]) != "N/A"
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
source("getfinancials.R")
getfinancials('Q')
companies
companies$ciks[8]
con <- url("http://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=0001522236")
htmlCode <- readLines(con)
close(con)
index <- 1
# if you want 10-Q data
if(period == 'Q') {
while(index <= length(htmlCode)) {
if(grepl("10-Q",htmlCode[index])) {
indices <- c(indices,index+1)
}
if(grepl("Next 40",htmlCode[85])) {
hasNext <- 1
}
index = index + 1
}
source("getfinancials.R")
debug(getfinancials('Q'))
debug(getfinancials('Q'))
source("getfinancials.R")
debug(getfinancials('Q'))
source("getfinancials.R")
source("getfinancials.R")
source("getfinancials.R")
>>>>>>> 50df182dbb7ecb279b01c5a9f1d7fd969ef93582
